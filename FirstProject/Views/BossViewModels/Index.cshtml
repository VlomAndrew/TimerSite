    @using System.Threading
@model IEnumerable<FirstProject.Models.BossViewModel>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" charset=utf-8/>
    <link type="text/css" href="~/Content/Site.css" rel="stylesheet" />
    <title>Index</title>

</head>
<script type="text/javascript">

    function sort(line) {
        console.log('in sort');
        for (var i = 0; i < line.length; i++) {
            for (var j = 0; j < line.length - 1; j++) {
                var elem1 = line[j];
                var elem2 = line[j + 1];
                var res_raw1 = elem1.getElementsByClassName('res_time')[0];
                var res_raw2 = elem2.getElementsByClassName('res_time')[0];
                const [fall_hours1, fall_min1, fall_sec1] = res_raw1.innerText.split('.').map(item => +item);
                const [fall_hours2, fall_min2, fall_sec2] = res_raw2.innerText.split('.').map(item => +item);
                if ((((((fall_hours1 * 60) + fall_min1) * 60) + fall_sec1) * 1000) >
                    (((((fall_hours2 * 60) + fall_min2) * 60) + fall_sec2) * 1000)) {
                    line[j] = elem2;
                    line[j + 1] = elem1;

                }
            }
        }
        return line;
    }

    function updateRespTime() {
        var lines = document.getElementsByClassName('line');

        for (const line of lines) {
            const fall_raw = line.getElementsByClassName('fall_time')[0].innerText;



            var res_raw = line.getElementsByClassName('res_time')[0];
            var resp_raw = line.getElementsByClassName('resp_time')[0].innerText;



            const [timer_hours, timer_min, timer_sec] = fall_raw.split('.').map(item=>+item);
            const [fall_hours, fall_min, fall_sec] = res_raw.innerText.split('.').map(item=>+item);


            const fall_timestamp = (((((fall_hours * 60) + fall_min) * 60) + fall_sec) * 1000);
            const last_timestamp = (((((timer_hours * 60) + timer_min) * 60) + timer_sec) * 1000);

            const [hours, minutes, seconds] = resp_raw.split('.').map(item => +item);

            const resp_miliseconds = (((((hours * 60) + minutes) * 60) + seconds) * 1000);
            var time_now = new Date(Date.now());
            time_now.setMinutes(time_now.getMinutes() + time_now.getTimezoneOffset() + 180);
            
            const in_what_time = last_timestamp + resp_miliseconds * (parseInt(line.getElementsByClassName('cdcount')[0].innerText) + 1);

            const result_miliseconds1 = fall_timestamp  * (parseInt(line.getElementsByClassName('cdcount')[0].innerText) + 1) - 1000;
            const result_miliseconds = in_what_time - (((((time_now.getHours() * 60) + time_now.getMinutes()) * 60) + time_now.getSeconds()) * 1000);

            const res_date = get_time(result_miliseconds,".");



            res_raw.innerText = res_date;
            line.getElementsByClassName('res_time_in')[0].innerText = get_time(in_what_time, ":");



            if (result_miliseconds === 0) {
                //звуковое оповещение
                var audio = new Audio(); // Создаём новый элемент Audio
                audio.src = '/Sounds/res.mp3'; // Указываем путь к звуку "клика"
                //audio.autoplay = true; // Автоматически запускаем
                audio.play();

            }
            else if (result_miliseconds < 0) {

                const res = line.getElementsByClassName('fall_time');
                //res[0].innerText = get_time(in_what_time, ".");
                var cdc = Math.trunc(result_miliseconds / resp_miliseconds) * -1;
                console.log(cdc);
                if (cdc > 0) {
                    line.getElementsByClassName('cdcount')[0].innerText = cdc;
                }
                line.getElementsByClassName('cdcount')[0].innerText = parseInt(line.getElementsByClassName('cdcount')[0].innerText) + 1;
                line.style.background = 'orange';
            }
            else if (result_miliseconds === (2 * 60 * 1000) && result_miliseconds > 0) {
                line.style.background = 'greenyellow';
                var audio = new Audio(); // Создаём новый элемент Audio
                audio.src = '/Sounds/2min.mp3'; // Указываем путь к звуку "клика"
                //audio.autoplay = true; // Автоматически запускаем
                audio.play();
            }
            else if (result_miliseconds < (2 * 60 * 1000 + 1) && result_miliseconds > 0) {
                line.style.background = 'greenyellow';
            }
           

        }
        
        var l = sort(lines);
        
    }

    function get_time(milisec,separ) {
        var time = milisec;
        var rev = false;
        if (time<0) {
            time = time * -1;
            rev = true;
        }

        time = time / 1000;

        var h = Math.trunc(time / 3600);



        time = time - (h *  3600);

        var min = Math.trunc(time / 60);

        time = time - (min * 60);

        var sec = time;

        var calch = (h > 23) ? h - 24 : h;
        var minstr = (min < 10) ? "0" + min : min;
        var hstr = (calch < 10) ? "0" + calch : calch;
        var secstr = (sec < 10) ? "0" + sec : sec;
        var minus_str = (rev) ? "-" : "";
        return minus_str + hstr + separ + minstr + separ + secstr;
    }

    function vison(elem_id) {
        var getelem_id = document.getElementById(elem_id);

        //getelem_id.getElementsByClassName('text_to_set_time')[0].style.display = 'block';
        //getelem_id.getElementsByClassName('text_to_set_time')[0].value = "";
        //getelem_id.getElementsByClassName('button_set_time_conf')[0].style.display = 'block';
        //getelem_id.getElementsByClassName('button_set_time_cancel')[0].style.display = 'block';
    }

    function canceltime(elem_id) {
        var getelem_id = document.getElementById(elem_id);
        console.log(getelem_id);
        //getelem_id.getElementsByClassName('text_to_set_time')[0].style.display = 'none';
        //getelem_id.getElementsByClassName('button_set_time_conf')[0].style.display = 'none';
        //getelem_id.getElementsByClassName('button_set_time_cancel')[0].style.display = 'none';
    }

    function unvis() {
        var lines = document.getElementsByClassName('line');

        for (var line of lines) {
            //var elem1 = line.getElementsByClassName('button_set_time_cancel');
            //var elem2 = line.getElementsByClassName('text_to_set_time');
            //var elem3 = line.getElementsByClassName('button_set_time_conf');

            //elem2[0].style.display = 'none';
            //elem3[0].style.display = 'none';
            //elem1[0].style.display = 'none';
        }
    }

    function set_custom_time(elem_id) {
        var getelem_id = document.getElementById(elem_id);
        getelem_id.getElementsByClassName('fall_time')[0].innerText =
            getelem_id.getElementsByClassName('text_to_set_time')[0].value;
        getelem_id.getElementsByClassName('cdcount')[0].innerText = 0;
        console.log(getelem_id.getElementsByClassName('fall_time')[0].innerText);
        console.log(getelem_id.getElementsByClassName('text_to_set_time').value);
        console.log(getelem_id.getElementsByClassName('text_to_set_time')[0].value);
        var model = @Html.Raw(Json.Encode(Model));
        console.log(model);
        var id_f = elem_id.slice(elem_id.indexOf('{') + 1, elem_id.indexOf('}'));


        const lines = document.getElementsByClassName('line');
        var i = 0;
        for (const line of lines) {
            if (line.contains(document.getElementById(elem_id))) {
                console.log('yes');
                continue;

            }
            i = i + 1;
        }
        console.log(model[parseInt(id_f)]);

        console.log(model[i]);



        unvis();
    }

    function foo() {
        return '1';
    }


    function init() {
        unvis();
        setInterval(updateRespTime, 1000);

    }

    function SetNow(elem_id) {

        var getelem_id = document.getElementById(elem_id);
        console.log(getelem_id);
        var now_t = new Date(Date.now());
        now_t.setMinutes(now_t.getMinutes() + now_t.getTimezoneOffset() + 180);
        var res = (((((now_t.getHours() * 60) + now_t.getMinutes()) * 60) + now_t.getSeconds()) * 1000);
        getelem_id.getElementsByClassName('fall_time')[0].innerText = get_time(res, ".");
        getelem_id.getElementsByClassName('cdcount')[0].innerText = 0;
        const lines = document.getElementsByClassName('line');

    }
</script>

    <body onload="init()">

    <div class="row">
        <div class="col-md-8">
            <table class="table">
                <tbody>
                <tr>
                    <th>

                    </th>
                    <th>
                        Имя босса
                    </th>
                    <th>
                        Упал
                    </th>
                    <th>
                        Реснется через
                    </th>
                    <th>
                        Реснется в
                    </th>
                    <th>
                        По кд раз
                    </th>
                    <th>
                        Время респа
                    </th>
                    <th>
                        Действия
                    </th>
                    @if (User.IsInRole("Admin"))
                    {
                        <th>
                            Только для админа
                        </th>
                    }

                </tr>
                @foreach (var item in Model)
                {

                    <tr class="line" id="line_{@item.Id}" style="background: @item.Color">
                        <td>
                            <img src="@string.Format("/Imgs/Портрет_{0}.png",@item.Name.Replace(' ','_'))"/>
                            
                        </td>
                        <td>
                            @Html.HiddenFor(m => item.Name)
                            @Html.DisplayFor(modelItem => item.Name)
                            
                        </td>
                        <td class="fall_time">
                            @Html.DisplayFor(modelItem => item.LastTime)
                        </td>
                        <td class="res_time">
                            @Html.DisplayFor(modelItem => item.KdTime)

                        </td>

                        <td>
                            <text class="res_time_in"></text>
                        </td>
                        <td class="cdcount">
                            @Html.DisplayFor(modelItem => item.KdCount)
                        </td>

                        <td class="resp_time">
                            @Html.DisplayFor(modelItem => item.KdTime)
                        </td>


                        <td>
                            <div class="row">
                                <div class="col-xs-6">
                                    @*<button class="button_set_now" id="button_{@item.Id}" onclick="SetNow('line_{@item.Id}')" type="submit">Упал сейчас</button>*@
                                    <form action="Edit.cshtml" method="post">
                                        @Html.ActionLink("Упал сейчас", "Edit", new {id = item.Id, fl = true}, new {@class = "button_set_now", @id = "button_{@item.Id}", onclick = "SetNow('line_{@item.Id}')"})
                                        @*<input  class="button_set_now" id="button_{@item.Id}" onclick="SetNow('line_{@item.Id}')" type="submit">Упал сейчас*@
                                    </form>
                                </div>
                                <div class="col-xs-6">
                                    @*<button type="button" class="button_set_time" id="button_set_time_conf{@item.Id}" onclick="vison('line_{@item.Id}')">Установить время</button>*@
                                    @Html.ActionLink("Установить время", "Edit", new {id = item.Id, fl = false}, new {@class = "button_set_time", @id = "button_set_time_conf{@item.Id}"})
                                </div>
                            </div>
                            @*<div class="row">
                                <div class="col-md-8">
                                    <input type="text" class="text_to_set_time" id="text_to_set_time_{@item.Id}">
                                </div>
                            </div>*@
                            <div class="row">
                                <div class="col-xs-6">
                                    @*<button class="button_set_time_conf" id="button_set_time_conf{@item.Id}" onclick="set_custom_time('line_{@item.Id}')">Подтвердить</button>
        <form action="Edit.cshtml" method="post">
            @Html.ActionLink("Подтвердить", "Edit", new {id = item.Id, fl = true}, new {@class = "button_set_time_conf", @id = "button_set_time_conf{@item.Id}"})
            <input  class="button_set_now" id="button_{@item.Id}" onclick="SetNow('line_{@item.Id}')" type="submit">Упал сейчас

        </form>*@
                                    @*@Html.ActionLink("Подтвердить", "Edit", new { id = item.Id, fl = false }, new { @class = "button_set_time_conf", @id = "button_set_time_conf{@item.Id}" })
                                </div>
                                <div class="col-xs-4">
                                    <button type="button" class="button_set_time_cancel" id="button_set_time_cancel{@item.Id}" onclick="canceltime('line_{@item.Id}')">Отмена</button>*""/*@
                                </div>
                            </div>

                        </td>
                        @if (User.IsInRole("Admin"))
                        {
                            <td>
                                @Html.ActionLink("Edit", "Edit", new {id = item.Id}) |
                                @*@Html.ActionLink("Details", "Details", new { id = item.Id }) |*@
                                @Html.ActionLink("Delete", "Delete", new {id = item.Id})
                            </td>
                        }


                    </tr>
                }
                </tbody>
            </table>
        </div>
        @if (User.IsInRole("Admin"))
        {
            <div class="col-md-4">

                @Html.ActionLink("Create New", "Create", new {}, new {@class = "button_1596547873487"})
            </div>
        }
    </div>

    </body>

</html>
